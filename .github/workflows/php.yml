name: PHP Composer

on:
  push:
    branches: [ "master" ]
  pull_request:
    branches: [ "master" ]

permissions:
  contents: read

jobs:
  build:

    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v4

    - name: Validate composer.json and composer.lock
      run: composer validate --strict

    - name: Cache Composer packages
      id: composer-cache
      uses: actions/cache@v3
      with:
        path: vendor
        key: ${{ runner.os }}-php-${{ hashFiles('**/composer.lock') }}
        restore-keys: |
          ${{ runner.os }}-php-

    - name: Install PHP dependencies
      run: composer install --prefer-dist --no-progress

    - name: Set up SQLite database
      run: |
        php bin/console doctrine:database:create --env=test
        php bin/console doctrine:schema:update --force --env=test

    - name: Install Node.js
      uses: actions/setup-node@v3
      with:
        node-version: '16'

    - name: Install Puppeteer
      run: npm install puppeteer

    - name: Start Symfony server
      run: php -S 127.0.0.1:8000 -t public &

    - name: Run Puppeteer tests
      run: node public/test.js

    - name: Run PHPUnit tests
      run: php bin/phpunit

    - name: Archive test results
      uses: actions/upload-artifact@v2
      with:
        name: test-results
        path: tests/junit.xml

    - name: Send notification to Discord
      env:
        DISCORD_WEBHOOK_URL: ${{ secrets.BUILDER }}
      run: |
        STATUS=":white_check_mark: Build succeeded"
        if [ "${{ job.status }}" != "success" ]; then
          STATUS=":x: Build failed"
        fi

        PAYLOAD=$(jq -n --arg status "$STATUS" --arg sha "$GITHUB_SHA" --arg repo "$GITHUB_REPOSITORY" \
        '{username: "CI Bot", embeds: [{title: $status, description: "Repository: \($repo)\nCommit: \($sha)"}]}')

        curl -X POST -H "Content-Type: application/json" -d "$PAYLOAD" "$BUILDER"
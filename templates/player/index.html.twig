{% extends 'base.html.twig' %}

{% block title %}Hello PlayerController!{% endblock %}

{% block body %}
    <style>
        .tic-tac-toe {
            display: grid;
            grid-template-columns: repeat(3, 100px);
            grid-template-rows: repeat(3, 100px);
            gap: 5px;
            justify-content: center;
            margin-bottom: 20px;
        }
        .tic-tac-toe div {
            display: flex;
            align-items: center;
            justify-content: center;
            border: 2px solid #000;
            font-size: 24px;
            cursor: pointer;
        }
    </style>

    <div class="container">
        <div class="d-flex justify-content-between align-items-center my-3">
            <span>{{ prenom }}</span>
            <span>{{ opponent }}</span>
        </div>

        <div class="tic-tac-toe">
            {% for i in 0..8 %}
                <div id="cell-{{ i }}" onclick="makeMove({{ i }})"></div>
            {% endfor %}
        </div>

        <table class="table table-striped">
            <thead>
                <tr>
                    <th scope="col">Rang</th>
                    <th scope="col">Nom</th>
                    <th scope="col">Score</th>
                </tr>
            </thead>
            <tbody>
                {% for player in players %}
                    <tr>
                        <td>{{ loop.index  }}</td>
                        <td>{{ player.name }}</td>
                        <td>{{ player.wins }}</td>
                    </tr>
                {% endfor %}
            </tbody>
        </table>
    </div>

    <script>
        const board = Array(9).fill(null);
        let currentPlayer = 'X';
        const winCombinations = [
            [0, 1, 2], [3, 4, 5], [6, 7, 8],
            [0, 3, 6], [1, 4, 7], [2, 5, 8],
            [0, 4, 8], [2, 4, 6]
        ];

        function checkWin(player) {
            return winCombinations.some(combination => {
                return combination.every(index => board[index] === player);
            });
        }

        function checkDraw() {
            return board.every(cell => cell !== null);
        }

        function makeMove(cell) {
            if (!board[cell]) {
                board[cell] = currentPlayer;
                document.getElementById('cell-' + cell).innerText = currentPlayer;
                if (checkWin(currentPlayer)) {
                    alert(currentPlayer + ' wins!');
                    sendAjax(currentPlayer);
                } else if (checkDraw()) {
                    alert('Draw!');
                    sendAjax('Draw');
                } else {
                    currentPlayer = currentPlayer === 'X' ? 'O' : 'X';
                    if (currentPlayer === 'O') {
                        makeRandomMove();
                    }
                }
            }
        }

        function makeRandomMove() {
            let availableCells = board.map((cell, index) => cell === null ? index : null).filter(index => index !== null);
            let randomCell = availableCells[Math.floor(Math.random() * availableCells.length)];
            if (randomCell !== undefined) {
                setTimeout(() => makeMove(randomCell), 500);
            }
        }

        function sendAjax(winner) {
            console.log(winner)
            fetch('/game-endpoint', {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json',
                },
                body: JSON.stringify({ winner: winner })
            }).then(response => {
                if (response.ok) {
                    console.log('Game result sent successfully');
                } else {
                    console.error('Error sending game result');
                }
            });
        }
    </script>
{% endblock %}
